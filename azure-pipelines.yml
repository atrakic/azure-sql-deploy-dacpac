# This is a pipeline to creates a dacpac
# From there it deploys the dacpac file to SQL Server

trigger:
  - '*'
pr:
  - main
  - master
resources:
  - repo: self


## Configure variables bellow
#   agentpool - The name of the agent pool you want to use (ideally a self-hosted one with latest sqlpackage installed)
#     Otherwise you must put additional logic in this pipeline to deploy latest version of sqlpackage onto the agent
#   BuildConfiguration - Configuration for build (Dev, Test, Release, etc)
#   SQLPoolartifactname - A name for the created artifact
#   AzureSubscription - A reference to an Azure subscription is required for the task to work, can be any one as will not be used
#   aadSqlUsername - Azure AD/MS Entra account used
#   aadSqlpw - Azure AD/MS Entra account used
#   DestSQLConnString - The connection string for the Fabric Data Warehouse (found in settings)
#   DestinationDW - The name of the Data Warehouse
#   Targetfile - Name of the dacpac file created (default is dame name as .sqlproj file, in this case FabricDWproject.dacpac)

variables:
  - group: DbProject

# To reference a self-hosted agent instead swap around the commented and uncommented references
pool:
  vmImage: 'windows-latest'
  # name: $(agentpool)

stages:
  - stage: BuildDacpac
    displayName: 'Build dacpac'
    jobs:
      - job: 'BuildDacpac'
        displayName: 'Build SQL Pool dacpac'
        # pool:
        #   vmImage: 'windows-latest'
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: 'dotnet tool update -g microsoft.sqlpackage'

          - task: DotNetCoreCLI@2
            displayName: 'Build the dacpac using dotnet'
            inputs:
              command: 'build'
              projects: 'DbProject/DbProject.sqlproj'
              #arguments: '--configuration $(BuildConfiguration)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publishes dacpac as an artifact'
            # Publishes the dacpac as part of an artifact within Azure DevOps
            inputs:
              PathtoPublish: 'bin/$(BuildConfiguration)'
              ArtifactName: $(SQLPoolartifactname)
              publishLocation: 'Container'

  # Note that doing this using a deployment job so can state environment
  - stage: Deploy
    displayName: 'Deploy Db'
    dependsOn: BuildDacpac
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: 'DeployDb'
        displayName: 'Deploy db'
        environment: $(environment)
        # pool:
        #   vmImage: 'windows-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: PowerShell@2
                  displayName: 'upgrade sqlpackage'
                  inputs:
                    targetType: 'inline'
                    script: |
                      wget -O DacFramework.msi "https://aka.ms/dacfx-msi"
                      msiexec.exe /i "DacFramework.msi" /qn
                - task: DownloadBuildArtifacts@0
                  displayName: 'Dowload build Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'specific'
                    artifactName:  '$(SQLPoolartifactname)'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: SqlAzureDacpacDeployment@1
                  displayName: 'Deploy DACPAC'
                  inputs:
                    azureSubscription: $(AzureSubscription)
                    AuthenticationType: 'aadAuthenticationPassword'
                    aadSqlUsername: '$(aadSqlUsername)'
                    aadSqlPassword: '$(aadSqlpw)'
                    ServerName: $(DestSQLConnString)
                    DatabaseName: '$(DestinationDW)'
                    deployType: 'DacpacTask'
                    DeploymentAction: 'Publish'
                    DacpacFile: '$(System.ArtifactsDirectory)\$(SQLPoolartifactname)\$(Targetfile)'
